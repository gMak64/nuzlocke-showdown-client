{"version":3,"file":"battle-choices.js","names":["BattleChoiceBuilder","request","choices","current","choiceType","move","targetLoc","mega","ultra","z","max","tera","alreadySwitchingIn","alreadyMega","alreadyMax","alreadyZ","alreadyTera","fillPasses","_proto","prototype","toString","concat","stringChoice","join","replace","isDone","length","requestLength","isEmpty","_i2","_this$choices2","choice","index","requestType","active","forceSwitch","maxTeamSize","currentMoveRequest","addChoice","choiceString","parseChoice","err","message","choosableTargets","includes","getChosenMove","target","targetPokemon","i","splice","push","pokemonIndex","activePokemon","moveIndex","zMoves","maxMoves","canDynamax","moves","Error","startsWith","moveRequest","slice","test","toID","parseInt","trim","endsWith","moveid","id","isTeamPreview","lowerChoice","toLowerCase","choiceid","matchLevel","match","side","pokemon","serverPokemon","curMatchLevel","name","speciesForme","Dex","species","get","baseSpecies","fainted","boost","fixRequest","battle","teamPreview","wait","noCancel","_i7","_request$side$pokemon2","parseDetails","ident","substr","details","parseHealth","condition","map","_i9","_request$active2","_i11","_active$moves2","canGigantamax","gigantamax","_i13","_active$maxMoves2","canZMove","_i15","_active$zMoves2"],"sources":["../src/battle-choices.ts"],"sourcesContent":["/**\n * Battle choices\n *\n * PS will send requests \"what do you do this turn?\", and you send back\n * choices \"I switch Pikachu for Caterpie, and Squirtle uses Water Gun\"\n *\n * This file contains classes for handling requests and choices.\n *\n * Dependencies: battle-dex\n *\n * @author Guangcong Luo <guangcongluo@gmail.com>\n * @license MIT\n */\n\ninterface BattleRequestSideInfo {\n\tname: string;\n\tid: 'p1' | 'p2' | 'p3' | 'p4';\n\tpokemon: ServerPokemon[];\n}\ninterface BattleRequestActivePokemon {\n\tmoves: {\n\t\tname: string,\n\t\tid: ID,\n\t\tpp: number,\n\t\tmaxpp: number,\n\t\ttarget: MoveTarget,\n\t\tdisabled?: boolean,\n\t}[];\n\tmaxMoves?: {\n\t\tname: string,\n\t\tid: ID,\n\t\ttarget: MoveTarget,\n\t\tdisabled?: boolean,\n\t}[];\n\tzMoves?: ({\n\t\tname: string,\n\t\tid: ID,\n\t\ttarget: MoveTarget,\n\t} | null)[];\n\t/** also true if the pokemon can Gigantamax */\n\tcanDynamax?: boolean;\n\tcanGigantamax?: boolean;\n\tcanMegaEvo?: boolean;\n\tcanUltraBurst?: boolean;\n\tcanTerastallize?: boolean;\n\ttrapped?: boolean;\n\tmaybeTrapped?: boolean;\n}\n\ninterface BattleMoveRequest {\n\trequestType: 'move';\n\trqid: number;\n\tside: BattleRequestSideInfo;\n\tactive: (BattleRequestActivePokemon | null)[];\n\tnoCancel?: boolean;\n}\ninterface BattleSwitchRequest {\n\trequestType: 'switch';\n\trqid: number;\n\tside: BattleRequestSideInfo;\n\tforceSwitch: boolean[];\n\tnoCancel?: boolean;\n}\ninterface BattleTeamRequest {\n\trequestType: 'team';\n\trqid: number;\n\tside: BattleRequestSideInfo;\n\tmaxTeamSize?: number;\n\tnoCancel?: boolean;\n}\ninterface BattleWaitRequest {\n\trequestType: 'wait';\n\trqid: number;\n\tside: undefined;\n\tnoCancel?: boolean;\n}\ntype BattleRequest = BattleMoveRequest | BattleSwitchRequest | BattleTeamRequest | BattleWaitRequest;\n\ninterface BattleMoveChoice {\n\tchoiceType: 'move';\n\t/** 1-based move */\n\tmove: number;\n\ttargetLoc: number;\n\tmega: boolean;\n\tultra: boolean;\n\tmax: boolean;\n\tz: boolean;\n\ttera: boolean;\n}\ninterface BattleShiftChoice {\n\tchoiceType: 'shift';\n}\ninterface BattleSwitchChoice {\n\tchoiceType: 'switch' | 'team';\n\t/** 1-based pokemon */\n\ttargetPokemon: number;\n}\ntype BattleChoice = BattleMoveChoice | BattleShiftChoice | BattleSwitchChoice;\n\n/**\n * Tracks a partial choice, allowing you to build it up one step at a time,\n * and maybe even construct a UI to build it!\n *\n * Doesn't support going backwards; just use `new BattleChoiceBuilder`.\n */\nclass BattleChoiceBuilder {\n\trequest: BattleRequest;\n\t/** Completed choices in string form */\n\tchoices: string[] = [];\n\t/** Currently active partial move choice - not used for other choices, which don't have partial states */\n\tcurrent: BattleMoveChoice = {\n\t\tchoiceType: 'move',\n\t\t/** if nonzero, show target screen; if zero, show move screen */\n\t\tmove: 0,\n\t\ttargetLoc: 0, // should always be 0: is not partial if `targetLoc` is known\n\t\tmega: false,\n\t\tultra: false,\n\t\tz: false,\n\t\tmax: false,\n\t\ttera: false,\n\t};\n\talreadySwitchingIn: number[] = [];\n\talreadyMega = false;\n\talreadyMax = false;\n\talreadyZ = false;\n\talreadyTera = false;\n\n\tconstructor(request: BattleRequest) {\n\t\tthis.request = request;\n\t\tthis.fillPasses();\n\t}\n\n\ttoString() {\n\t\tlet choices = this.choices;\n\t\tif (this.current.move) choices = choices.concat(this.stringChoice(this.current));\n\t\treturn choices.join(', ').replace(/, team /g, ', ');\n\t}\n\n\tisDone() {\n\t\treturn this.choices.length >= this.requestLength();\n\t}\n\tisEmpty() {\n\t\tfor (const choice of this.choices) {\n\t\t\tif (choice !== 'pass') return false;\n\t\t}\n\t\tif (this.current.move) return false;\n\t\treturn true;\n\t}\n\n\t/** Index of the current Pokémon to make choices for */\n\tindex() {\n\t\treturn this.choices.length;\n\t}\n\t/** How many choices is the server expecting? */\n\trequestLength() {\n\t\tconst request = this.request;\n\t\tswitch (request.requestType) {\n\t\tcase 'move':\n\t\t\treturn request.active.length;\n\t\tcase 'switch':\n\t\t\treturn request.forceSwitch.length;\n\t\tcase 'team':\n\t\t\tif (request.maxTeamSize) return request.maxTeamSize;\n\t\t\treturn 1;\n\t\tcase 'wait':\n\t\t\treturn 0;\n\t\t}\n\t}\n\tcurrentMoveRequest() {\n\t\tif (this.request.requestType !== 'move') return null;\n\t\treturn this.request.active[this.index()];\n\t}\n\n\taddChoice(choiceString: string) {\n\t\tlet choice: BattleChoice | null;\n\t\ttry {\n\t\t\tchoice = this.parseChoice(choiceString);\n\t\t} catch (err) {\n\t\t\treturn (err as Error).message;\n\t\t}\n\t\tif (!choice) {\n\t\t\treturn \"You do not need to manually choose to pass; the client handles it for you automatically\";\n\t\t}\n\t\tif (choice.choiceType === 'move') {\n\t\t\tif (!choice.targetLoc && this.requestLength() > 1) {\n\t\t\t\tconst choosableTargets = ['normal', 'any', 'adjacentAlly', 'adjacentAllyOrSelf', 'adjacentFoe'];\n\t\t\t\tif (choosableTargets.includes(this.getChosenMove(choice, this.index()).target)) {\n\t\t\t\t\tthis.current.move = choice.move;\n\t\t\t\t\tthis.current.mega = choice.mega;\n\t\t\t\t\tthis.current.ultra = choice.ultra;\n\t\t\t\t\tthis.current.z = choice.z;\n\t\t\t\t\tthis.current.max = choice.max;\n\t\t\t\t\tthis.current.tera = choice.tera;\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (choice.mega) this.alreadyMega = true;\n\t\t\tif (choice.z) this.alreadyZ = true;\n\t\t\tif (choice.max) this.alreadyMax = true;\n\t\t\tif (choice.tera) this.alreadyTera = true;\n\t\t\tthis.current.move = 0;\n\t\t\tthis.current.mega = false;\n\t\t\tthis.current.ultra = false;\n\t\t\tthis.current.z = false;\n\t\t\tthis.current.max = false;\n\t\t\tthis.current.tera = false;\n\t\t} else if (choice.choiceType === 'switch' || choice.choiceType === 'team') {\n\t\t\tif (this.alreadySwitchingIn.includes(choice.targetPokemon)) {\n\t\t\t\tif (choice.choiceType === 'switch') {\n\t\t\t\t\treturn \"You've already chosen to switch that Pokémon in\";\n\t\t\t\t}\n\t\t\t\t// remove choice instead\n\t\t\t\tfor (let i = 0; i < this.alreadySwitchingIn.length; i++) {\n\t\t\t\t\tif (this.alreadySwitchingIn[i] === choice.targetPokemon) {\n\t\t\t\t\t\tthis.alreadySwitchingIn.splice(i, 1);\n\t\t\t\t\t\tthis.choices.splice(i, 1);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn \"Unexpected bug, please report this\";\n\t\t\t}\n\t\t\tthis.alreadySwitchingIn.push(choice.targetPokemon);\n\t\t} else if (choice.choiceType === 'shift') {\n\t\t\tif (this.index() === 1) {\n\t\t\t\treturn \"Only Pokémon not already in the center can shift to the center\";\n\t\t\t}\n\t\t}\n\t\tthis.choices.push(this.stringChoice(choice));\n\t\tthis.fillPasses();\n\t\treturn null;\n\t}\n\n\t/**\n\t * Move and switch requests will often skip over some active Pokémon (mainly\n\t * fainted Pokémon). This will fill them in automatically, so we don't need\n\t * to ask a user for them.\n\t */\n\tfillPasses() {\n\t\tconst request = this.request;\n\t\tswitch (request.requestType) {\n\t\tcase 'move':\n\t\t\twhile (this.choices.length < request.active.length && !request.active[this.choices.length]) {\n\t\t\t\tthis.choices.push('pass');\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'switch':\n\t\t\twhile (this.choices.length < request.forceSwitch.length && !request.forceSwitch[this.choices.length]) {\n\t\t\t\tthis.choices.push('pass');\n\t\t\t}\n\t\t}\n\t}\n\n\tgetChosenMove(choice: BattleMoveChoice, pokemonIndex: number) {\n\t\tconst request = this.request as BattleMoveRequest;\n\t\tconst activePokemon = request.active[pokemonIndex]!;\n\t\tconst moveIndex = choice.move - 1;\n\t\tif (choice.z) {\n\t\t\treturn activePokemon.zMoves![moveIndex]!;\n\t\t}\n\t\tif (choice.max || (activePokemon.maxMoves && !activePokemon.canDynamax)) {\n\t\t\treturn activePokemon.maxMoves![moveIndex];\n\t\t}\n\t\treturn activePokemon.moves[moveIndex];\n\t}\n\n\t/**\n\t * Parses a choice from string form to BattleChoice form\n\t */\n\tparseChoice(choice: string): BattleChoice | null {\n\t\tconst request = this.request;\n\t\tif (request.requestType === 'wait') throw new Error(`It's not your turn to choose anything`);\n\n\t\tconst index = this.choices.length;\n\n\t\tif (choice === 'shift') return {choiceType: 'shift'};\n\n\t\tif (choice.startsWith('move ')) {\n\t\t\tif (request.requestType !== 'move') {\n\t\t\t\tthrow new Error(`You must switch in a Pokémon, not move.`);\n\t\t\t}\n\t\t\tconst moveRequest = request.active[index]!;\n\t\t\tchoice = choice.slice(5);\n\t\t\tlet current: BattleMoveChoice = {\n\t\t\t\tchoiceType: 'move',\n\t\t\t\tmove: 0,\n\t\t\t\ttargetLoc: 0,\n\t\t\t\tmega: false,\n\t\t\t\tultra: false,\n\t\t\t\tz: false,\n\t\t\t\tmax: false,\n\t\t\t\ttera: false,\n\t\t\t};\n\t\t\twhile (true) {\n\t\t\t\t// If data ends with a number, treat it as a target location.\n\t\t\t\t// We need to special case 'Conversion 2' so it doesn't get\n\t\t\t\t// confused with 'Conversion' erroneously sent with the target\n\t\t\t\t// '2' (since Conversion targets 'self', targetLoc can't be 2).\n\t\t\t\tif (/\\s(?:-|\\+)?[1-3]$/.test(choice) && toID(choice) !== 'conversion2') {\n\t\t\t\t\tif (current.targetLoc) throw new Error(`Move choice has multiple targets`);\n\t\t\t\t\tcurrent.targetLoc = parseInt(choice.slice(-2), 10);\n\t\t\t\t\tchoice = choice.slice(0, -2).trim();\n\t\t\t\t} else if (choice.endsWith(' mega')) {\n\t\t\t\t\tcurrent.mega = true;\n\t\t\t\t\tchoice = choice.slice(0, -5);\n\t\t\t\t} else if (choice.endsWith(' zmove')) {\n\t\t\t\t\tcurrent.z = true;\n\t\t\t\t\tchoice = choice.slice(0, -6);\n\t\t\t\t} else if (choice.endsWith(' ultra')) {\n\t\t\t\t\tcurrent.ultra = true;\n\t\t\t\t\tchoice = choice.slice(0, -6);\n\t\t\t\t} else if (choice.endsWith(' dynamax')) {\n\t\t\t\t\tcurrent.max = true;\n\t\t\t\t\tchoice = choice.slice(0, -8);\n\t\t\t\t} else if (choice.endsWith(' max')) {\n\t\t\t\t\tcurrent.max = true;\n\t\t\t\t\tchoice = choice.slice(0, -4);\n\t\t\t\t} else if (choice.endsWith(' terastallize')) {\n\t\t\t\t\tcurrent.tera = true;\n\t\t\t\t\tchoice = choice.slice(0, -13);\n\t\t\t\t} else if (choice.endsWith(' terastal')) {\n\t\t\t\t\tcurrent.tera = true;\n\t\t\t\t\tchoice = choice.slice(0, -9);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (/^[0-9]+$/.test(choice)) {\n\t\t\t\t// Parse a one-based move index.\n\t\t\t\tcurrent.move = parseInt(choice, 10);\n\t\t\t} else {\n\t\t\t\t// Parse a move ID.\n\t\t\t\t// Move names are also allowed, but may cause ambiguity (see client issue #167).\n\t\t\t\tlet moveid = toID(choice);\n\t\t\t\tif (moveid.startsWith('hiddenpower')) moveid = 'hiddenpower' as ID;\n\n\t\t\t\tfor (let i = 0; i < moveRequest.moves.length; i++) {\n\t\t\t\t\tif (moveid === moveRequest.moves[i].id) {\n\t\t\t\t\t\tcurrent.move = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!current.move && moveRequest.zMoves) {\n\t\t\t\t\tfor (let i = 0; i < moveRequest.zMoves.length; i++) {\n\t\t\t\t\t\tif (!moveRequest.zMoves[i]) continue;\n\t\t\t\t\t\tif (moveid === moveRequest.zMoves[i]!.id) {\n\t\t\t\t\t\t\tcurrent.move = i + 1;\n\t\t\t\t\t\t\tcurrent.z = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!current.move && moveRequest.maxMoves) {\n\t\t\t\t\tfor (let i = 0; i < moveRequest.maxMoves.length; i++) {\n\t\t\t\t\t\tif (moveid === moveRequest.maxMoves[i].id) {\n\t\t\t\t\t\t\tcurrent.move = i + 1;\n\t\t\t\t\t\t\tcurrent.max = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (current.max && !moveRequest.canDynamax) current.max = false;\n\t\t\treturn current;\n\t\t}\n\n\t\tif (choice.startsWith('switch ') || choice.startsWith('team ')) {\n\t\t\tchoice = choice.slice(choice.startsWith('team ') ? 5 : 7);\n\t\t\tconst isTeamPreview = request.requestType === 'team';\n\t\t\tlet current: BattleSwitchChoice = {\n\t\t\t\tchoiceType: isTeamPreview ? 'team' : 'switch',\n\t\t\t\ttargetPokemon: 0,\n\t\t\t};\n\t\t\tif (/^[0-9]+$/.test(choice)) {\n\t\t\t\t// Parse a one-based move index.\n\t\t\t\tcurrent.targetPokemon = parseInt(choice, 10);\n\t\t\t} else {\n\t\t\t\t// Parse a pokemon name\n\t\t\t\tconst lowerChoice = choice.toLowerCase();\n\t\t\t\tconst choiceid = toID(choice);\n\t\t\t\tlet matchLevel = 0;\n\t\t\t\tlet match = 0;\n\t\t\t\tfor (let i = 0 ; i < request.side.pokemon.length; i++) {\n\t\t\t\t\tconst serverPokemon = request.side.pokemon[i];\n\t\t\t\t\tlet curMatchLevel = 0;\n\t\t\t\t\tif (choice === serverPokemon.name) {\n\t\t\t\t\t\tcurMatchLevel = 10;\n\t\t\t\t\t} else if (lowerChoice === serverPokemon.name.toLowerCase()) {\n\t\t\t\t\t\tcurMatchLevel = 9;\n\t\t\t\t\t} else if (choiceid === toID(serverPokemon.name)) {\n\t\t\t\t\t\tcurMatchLevel = 8;\n\t\t\t\t\t} else if (choiceid === toID(serverPokemon.speciesForme)) {\n\t\t\t\t\t\tcurMatchLevel = 7;\n\t\t\t\t\t} else if (choiceid === toID(Dex.species.get(serverPokemon.speciesForme).baseSpecies)) {\n\t\t\t\t\t\tcurMatchLevel = 6;\n\t\t\t\t\t}\n\t\t\t\t\tif (curMatchLevel > matchLevel) {\n\t\t\t\t\t\tmatch = i + 1;\n\t\t\t\t\t\tmatchLevel = curMatchLevel;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!match) {\n\t\t\t\t\tthrow new Error(`Couldn't find Pokémon \"${choice}\" to switch to`);\n\t\t\t\t}\n\t\t\t\tcurrent.targetPokemon = match;\n\t\t\t}\n\t\t\tif (!isTeamPreview && current.targetPokemon - 1 < this.requestLength()) {\n\t\t\t\tthrow new Error(`That Pokémon is already in battle!`);\n\t\t\t}\n\t\t\tconst target = request.side.pokemon[current.targetPokemon - 1];\n\t\t\tif (!target) {\n\t\t\t\tthrow new Error(`Couldn't find Pokémon \"${choice}\" to switch to!`);\n\t\t\t}\n\t\t\tif (target.fainted) {\n\t\t\t\tthrow new Error(`${target} is fainted and cannot battle!`);\n\t\t\t}\n\t\t\treturn current;\n\t\t}\n\n\t\tif (choice === 'pass') return null;\n\n\t\tthrow new Error(`Unrecognized choice \"${choice}\"`);\n\t}\n\n\t/**\n\t * Converts a choice from `BattleChoice` into string form\n\t */\n\tstringChoice(choice: BattleChoice | null) {\n\t\tif (!choice) return `pass`;\n\t\tswitch (choice.choiceType) {\n\t\tcase 'move':\n\t\t\tconst target = choice.targetLoc ? ` ${choice.targetLoc > 0 ? '+' : ''}${choice.targetLoc}` : ``;\n\t\t\tconst boost = `${choice.max ? ' max' : ''}${choice.mega ? ' mega' : ''}${choice.z ? ' zmove' : ''}${choice.tera ? ' terastallize' : ''}`;\n\t\t\treturn `move ${choice.move}${boost}${target}`;\n\t\tcase 'switch':\n\t\tcase 'team':\n\t\t\treturn `${choice.choiceType} ${choice.targetPokemon}`;\n\t\tcase 'shift':\n\t\t\treturn `shift`;\n\t\t}\n\t}\n\n\t/**\n\t * The request sent from the server is actually really gross, but we'll have\n\t * to wait until we transition to the new client before fixing it in the\n\t * protocol, in the interests of not needing to fix it twice (or needing to\n\t * fix it without TypeScript).\n\t *\n\t * In the meantime, this function converts a request from a shitty request\n\t * to a request that makes sense.\n\t *\n\t * I'm sorry for literally all of this.\n\t */\n\tstatic fixRequest(request: any, battle: Battle) {\n\t\tif (!request.requestType) {\n\t\t\trequest.requestType = 'move';\n\t\t\tif (request.forceSwitch) {\n\t\t\t\trequest.requestType = 'switch';\n\t\t\t} else if (request.teamPreview) {\n\t\t\t\trequest.requestType = 'team';\n\t\t\t} else if (request.wait) {\n\t\t\t\trequest.requestType = 'wait';\n\t\t\t}\n\t\t}\n\n\t\tif (request.requestType === 'wait') request.noCancel = true;\n\t\tif (request.side) {\n\t\t\tfor (const serverPokemon of request.side.pokemon) {\n\t\t\t\tbattle.parseDetails(serverPokemon.ident.substr(4), serverPokemon.ident, serverPokemon.details, serverPokemon);\n\t\t\t\tbattle.parseHealth(serverPokemon.condition, serverPokemon);\n\t\t\t}\n\t\t}\n\n\t\tif (request.active) {\n\t\t\trequest.active = request.active.map(\n\t\t\t\t(active: any, i: number) => request.side.pokemon[i].fainted ? null : active\n\t\t\t);\n\t\t\tfor (const active of request.active) {\n\t\t\t\tif (!active) continue;\n\t\t\t\tfor (const move of active.moves) {\n\t\t\t\t\tif (move.move) move.name = move.move;\n\t\t\t\t\tmove.id = toID(move.name);\n\t\t\t\t}\n\t\t\t\tif (active.maxMoves) {\n\t\t\t\t\tif (active.maxMoves.maxMoves) {\n\t\t\t\t\t\tactive.canGigantamax = active.maxMoves.gigantamax;\n\t\t\t\t\t\tactive.maxMoves = active.maxMoves.maxMoves;\n\t\t\t\t\t}\n\t\t\t\t\tfor (const move of active.maxMoves) {\n\t\t\t\t\t\tif (move.move) move.name = Dex.moves.get(move.move).name;\n\t\t\t\t\t\tmove.id = toID(move.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (active.canZMove) {\n\t\t\t\t\tactive.zMoves = active.canZMove;\n\t\t\t\t\tfor (const move of active.zMoves) {\n\t\t\t\t\t\tif (!move) continue;\n\t\t\t\t\t\tif (move.move) move.name = move.move;\n\t\t\t\t\t\tmove.id = toID(move.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],"mappings":"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"}